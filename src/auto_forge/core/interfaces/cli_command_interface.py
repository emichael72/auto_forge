"""
Script:         cli_command_interface.py
Author:         AutoForge Team

Description:
    core abstract base class which provides a standardized interface for implementing modular,
    pluggable command-line commands within the AutoForge framework.

    Each command subclass is responsible for:
        - Declaring its name and description.
        - Registering its CLI arguments using `argparse`.
        - Implementing execution logic based on parsed arguments.

    The interface supports both programmatic and shell-style invocation, enabling dynamic discovery
    and execution of commands across tools and environments.
"""

import argparse
import io
import shlex
import sys
import time
from abc import ABC, abstractmethod
from types import ModuleType
from typing import Any, Optional

# AutoForge imports
from auto_forge import (AutoForgeModuleInfo, AutoForgeModuleType)
from auto_forge.common.registry import Registry  # Runtime import to prevent circular import
from auto_forge.common.toolbox import ToolBox  # Runtime import to prevent circular import


class _CLICapturingArgumentParser(argparse.ArgumentParser):
    """
        A custom ArgumentParser that captures error messages into an internal string buffer
        instead of printing to stderr and exiting immediately.e.
        """

    def __init__(self, *args, **kwargs):
        """
        Initializes the parser and sets up an internal buffer to capture error messages.
        Args and kwargs are passed directly to the base ArgumentParser constructor.
        """
        self.error_output = io.StringIO()
        super().__init__(*args, **kwargs)

    def exit(self, status=0, message=None):
        """
        Overrides the default exit behavior to capture the message instead of printing.
        Args:
            status (int): Exit code to raise with SystemExit.
            message (str): Optional error message to capture.
        """
        if message:
            self.error_output.write(message.strip())
        raise SystemExit(status)

    def error(self, message):
        """
        Overrides the default error handling to capture the usage message and error text.
        Args:
            message (str): The error message generated by argparse.
        """
        self.print_usage(self.error_output)
        self.error_output.write(f"{self.prog}: error: {message.strip()}\n")
        raise SystemExit(2)

    def get_error_message(self) -> str:
        """
        Returns the captured error message as a trimmed string.
        Returns:
            str: The accumulated error output from the most recent parse attempt.
        """
        return self.error_output.getvalue().strip()

    def print_help(self, file=None):
        """
        Overrides default help output with a custom version.
        """

        help_text = self.format_help()
        # Remove the 'usage: ...' line(s) at the top
        trimmed_help = "\n".join(line for line in help_text.splitlines() if not line.startswith("usage:"))
        print(trimmed_help + '\n')

    def print_usage(self, file=None):
        """
        Overrides usage banner output.
        """
        self.print_help()


class CLICommandInterface(ABC):
    """
    Abstract base class for CLI commands that can be dynamically registered and executed.
    Each derived class must define its name, description, argument parser, and run logic.
    """

    # Error constants
    COMMAND_ERROR_NO_ARGUMENTS: int = 0xFFFF

    def __init__(self, command_name: str, command_description: Optional[str] = None,
                 command_version: Optional[str] = None,
                 raise_exceptions: bool = False):
        """
        Initializes the CLICommand and prepares its argument parser using
        the name and description provided by the subclass.
        Args:.
            command_name (str): The name of the CLI command.
            command_description (str): Optional description of the CLI command.
            command_version (str): Optional version of the CLI command.
            raise_exceptions (bool): Whether to raise an exception when parsing errors.
        """

        self._last_error: Optional[str] = None
        self._raise_exceptions = raise_exceptions

        # Persist this module instance in the global registry for centralized access
        registry = Registry.get_instance()
        self._module_info: AutoForgeModuleInfo = (
            registry.register_module(name=command_name,
                                     description=command_description if command_description else "Description not provided",
                                     version=command_version if command_version else "0.0.0",
                                     auto_forge_module_type=AutoForgeModuleType.CLI_COMMAND))

        # Optional tool initialization logic
        if not self.initialize() and self._raise_exceptions:
            raise RuntimeError(f"failed to initialize '{self._module_info.name}' command.")

        super().__init__()

    def get_last_error(self) -> Optional[str]:
        """
        Returns the last recorded error message, if an error occurred during the previous execution.
        Returns:
            Optional[str]: The error message string, or None if no error was recorded.
        """
        return self._last_error

    def get_info(self, python_module_type: Optional[ModuleType] = None) -> AutoForgeModuleInfo:
        """
        Retrievers information about the implemented command line tool.
        Note: Implementation class must call _set_info().
        Args:
            python_module_type (Optional[ModuleType]): The type of this dynamically loaded module.
                Must be provided externally, as it cannot be inferred during dynamic loading.
        Returns:
            AutoForgeModuleInfo: a named tuple containing the implemented command id
        """
        if self._module_info is None:
            raise RuntimeError('command info not initialized, make sure call set_info() first')

        # Update the registry with the Python module type and inviolate the description field
        if python_module_type and not self._module_info.python_module_type:
            self._module_info = self._module_info._replace(python_module_type=python_module_type)

            # Update the description using the module's docstring, which typically provides
            # more detailed information than the default description.
            description = ToolBox.get_module_description(python_module_type=python_module_type)
            if isinstance(description, str):
                description = (f"{description}\n\nArgs:\n    "
                               f"Run '{self._module_info.name} --help' to see all available arguments.")
                self._module_info = self._module_info._replace(description=description)

        return self._module_info

    def execute(self, flat_args: Optional[str] = None, **kwargs: Any) -> Optional[int]:
        """
        Executes the command using either a shell-style string or structured kwargs.

        Args:
            flat_args (Optional[str]): If provided, a raw shell-style string (e.g., "--flag -v").
            **kwargs: Alternatively, keyword-style argument values (e.g., flag=True, count=3).

        Returns:
            int: 0 on success, non-zero on failure (e.g., usage error).
        """
        # Invalidate last error
        self._last_error = None
        return_value: int = 1

        # Call the mandatory implementation create_parser() to create parser instance if it's not created
        parser: _CLICapturingArgumentParser = _CLICapturingArgumentParser(
            prog=self._module_info.name,
            description=self._module_info.description
        )
        self.create_parser(parser)

        # Make sure we always support version
        parser.add_argument("-v", "--version", action="store_true", help="Show version and exit")

        if flat_args is not None:
            args_list = shlex.split(flat_args.strip())
        else:
            args_list = []
            for key, value in kwargs.items():
                cli_key = f'--{key.replace("_", "-")}'
                if isinstance(value, bool):
                    if value:
                        args_list.append(cli_key)
                else:
                    args_list.extend([cli_key, str(value)])
        try:
            # Handle arguments special care for version output
            if "-v" in args_list or "--version" in args_list:
                print(f"AutoForge '{self._module_info.name}' version {self._module_info.version}")
                return_value = 0
            else:
                args = parser.parse_args(args_list)
                return_value = self.run(args)

            # Auto print help when no arguments provided
            if return_value == self.COMMAND_ERROR_NO_ARGUMENTS:
                parser.print_help()

        except SystemExit:
            # Trap argparse attempt to exiot and return non-zero
            self._last_error = parser.get_error_message()
        except Exception as execution_exception:  # Propagate any other error
            self._last_error = str(execution_exception).strip()
        finally:
            time.sleep(0.1)
            if self._last_error is not None:
                if self._raise_exceptions:
                    raise RuntimeError(self._last_error)
                else:
                    print(self._last_error)

            sys.stdout.flush()
            return return_value

    def initialize(self, **kwargs: Any) -> bool:
        """
        Optional interface method for command-specific one-time initialization.
        Args:
            **kwargs (Any): Optional initialization parameters specific to the command.
        Returns:
            bool: True if initialization succeeded, False otherwise.
        """
        return True

    @abstractmethod
    def create_parser(self, parser: argparse.ArgumentParser) -> None:
        """
        Adds command-specific arguments to the provided parser.
        Args:
            parser (argparse.ArgumentParser): Parser to populate with arguments.
        """
        raise NotImplementedError("must implement 'create_parser'")

    @abstractmethod
    def run(self, args: argparse.Namespace) -> int:
        """
        Executes the actual logic of the command after parsing.
        Args:
            args (argparse.Namespace): Parsed arguments.
        Returns:
            int: 0 on success, non-zero on failure.
        """
        raise NotImplementedError("must implement 'run'")
