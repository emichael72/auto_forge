/*
    Environment Setup Example Script
    --------------------------------

    The following example demonstrates how to define the necessary steps to prepare
    a complete development environment with the following setup:

    1. Configure required proxy environment variables â€” these are essential for any
       subsequently launched shell tools that access online resources (e.g., pip, curl, etc.).
    2. Validate the presence of required prerequisite binaries such as Python, CMake, Git,
       Ninja, and others.
    3. Create the workspace skeleton directory structure.
    4. Set up a dedicated Python 3.9 virtual environment for the project, update pip,
       and install required Python packages.
    5. Install AutoForge into the newly created virtual environment.
    6. Use the dynamically loaded CLI command 'zephyr_sdk' to detect any existing
       Zephyr SDK installation.
    7. Download the Zephyr SDK to a temporary directory if not already present.

    Note:
    This script is formatted as JSON. A JSON preprocessor removes all comments before execution.
*/

{
	"status_title_length": 60,
	"status_add_time_prefix": true,
	"status_new_line": true,
	"status_pre_message": "\nHello, welcome to the $SOLUTION_NAME setup..",
	"status_post_message": "\n\nSetup is completed.\n",
	// Steps:
	"steps": [
		{
			"description": "Setting HTTP PROXY environment",
			"method": "environment_variable_set",
			"arguments": {
				"name": "http_proxy",
				"value": "http://proxy-dmz.intel.com:911"
			}
		},
		{
			"description": "Setting HTTPS PROXY environment",
			"method": "environment_variable_set",
			"arguments": {
				"name": "https_proxy",
				"value": "http://proxy-dmz.intel.com:911"
			}
		},
		{
			"description": "Looking for 'python' 3.8.0 or grater",
			"method": "validate_prerequisite",
			"arguments": {
				"command": "python",
				"arguments": "--version",
				"cwd": "$HOME/.pyenv/shims",
				"expected_response": "Python 3.8.0",
				"allow_greater_decimal": true
			}
		},
		{
			"description": "Looking for 'git'",
			"method": "validate_prerequisite",
			"arguments": {
				"command": "git",
				"arguments": "--version"
			}
		},
		{
			"description": "Looking for 'make'",
			"method": "validate_prerequisite",
			"arguments": {
				"command": "make",
				"arguments": "--version"
			}
		},
		{
			"description": "Looking for 'gcc'",
			"method": "validate_prerequisite",
			"arguments": {
				"command": "gcc",
				"arguments": "--version"
			}
		},
		{
			"description": "Looking for 'g++'",
			"method": "validate_prerequisite",
			"arguments": {
				"command": "g++",
				"arguments": "--version"
			}
		},
		{
			"description": "Getting git access token using 'dt'",
			"method": "execute_shell_command",
			"arguments": {
				"command_and_args": "dt github print-token",
				"cwd": "$HOME/bin"
			},
			// Store the executed command response in key name 'dt_token'
			"response_store_key": "dt_token"
		},
		{
			"description": "Initializing workspace path",
			"method": "initialize_workspace",
			"arguments": {
				"delete_existing": false,
				"must_be_empty": true,
				"create_as_needed": true,
				"change_dir": true
			}
		},
		{
			"description": "Creating essential paths",
			"method": "path_create",
			"arguments": {
				"paths": [
					"build",
					"build/logs",
					"$SOLUTION_NAME/fw",
					"$SOLUTION_NAME/scripts"
				]
			}
		},
		{
			"description": "Creating Python virtual environment",
			"method": "python_virtualenv_create",
			"arguments": {
				"venv_path": ".venv",
				"python_version": "3.9",
				"python_binary_path": "$HOME/.pyenv/shims"
			}
		},
		{
			"description": "Updating PIP in virtual environment",
			"method": "python_update_pip",
			"arguments": {
				"venv_path": ".venv"
			}
		},
		{
			"description": "Installing Python packages",
			"method": "python_package_add",
			"arguments": {
				"venv_path": ".venv",
				"package_or_requirements": "colorama json5 jsonschema tabulate psutil toml gitpython"
			}
		},
		{
			"description": "Installing AutoForge in virtual environment",
			"method": "python_package_add",
			"arguments": {
				"venv_path": ".venv",
				"package_or_requirements": "git+https://github.com/emichael72/auto_forge.git"
			}
		},
		{
			"description": "Removing AutoForge from non virtual environment",
			"method": "python_package_uninstall",
			"arguments": {
				"package": "auto_forge"
			}
		},
		{
			"description": "Cloning 'btop'",
			"method": "git_clone_repo",
			"arguments": {
				"repo_url": "https://github.com/aristocratos/btop.git",
				"dest_repo_path": "$PROJ_SOURCES_BASE/btop",
				"revision": "main",
				"timeout": 360
			}
		}
	]
}
