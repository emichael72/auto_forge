/*
    AutoForge Solution Configuration File
    -------------------------------------
    Description:
    Inspired by modular management systems like Microsoft Visual Studio, this configuration file
    facilitates the detailed description of multiple software and hardware solutions. Each solution
    can encompass several projects, which in turn can include multiple configurations. This hierarchical
    structure provides a robust framework for organizing complex build environments.

    Structure:
    - Solutions: Top-level elements containing one or more projects, each tailored to specific
      aspects of the broader solution.
    - Projects: Sub-elements within solutions, representing distinct software or hardware components,
      each capable of having its own set of configurations.
    - Configurations: Defined within projects to specify unique setups such as 'debug' or 'release' builds,
      detailing compiler flags, build paths, target specifications, and other build parameters.

    Use Case:
    For instance, a solution named "OurSolution" might include projects like "ZephyrRTOS" and "Bootloader",
    each with configurations tailored for 'debug' and 'release', addressing different aspects of
    development and deployment.

    Referencing Logic:
    - This file employs dynamic key-value referencing to link and reuse settings within the JSON structure,
      ensuring consistency and easing maintenance.

    - Local Referencing: Directly refers to keys within the current context (solution, project, or configuration).
      Example:
      "board": "some_board",
      "cmake_top_level_path": "/home/dummy/<$ref_board>",

    - Alternate Local Referencing: Offers the same functionality as local referencing, often used for enhanced
      readability or specific contextual needs.
      Example:
      "board": "some_board",
      "cmake_top_level_path": "/home/dummy/<$ref_configurations[].board>",

    - Explicit Referencing: Enables the use of keys from different scopes, either locally or globally within
      the document, here we must use the full opath to the referenced variable.
      Example:
      "dummy": "<$ref_solutions[OurSolution].projects[Zephyr].configurations[debug].board>"

    - Reference Syntax: Embeds references within "<$ref_" followed by the key name and closed with ">",
      streamlining dynamic data retrieval.

    Derivation Logic:
    - Supports dynamic inheritance of settings from one configuration to another, allowing for the extension
      or modification of base configurations without redundancy.

    - Use Case:
      If a 'release' configuration forms the baseline for a 'special_release' variant that requires additional
      features or modifications, it can inherit settings from 'release', overriding or adding properties as needed.

    - Derivation Syntax:
      Indicated by a "data" key within a configuration, pointing to the source configuration via a structured
      path: "<$derived_from_solutions[solution_name].projects[project_name].configurations[config_name]>".

    - Derivation Example:
      A configuration might inherit from 'release' while enabling additional debug tools:
      {
        "name": "debug_extended",
        "data": "<$derived_from_solutions[OurSolution].projects[Zephyr].configurations[release]>"
        // Subsequent modifications or overrides can be specified here.
      }

    - Processing:
      During preprocessing, the system resolves the "data" key, merges the referenced configuration into the
      new context, and allows for any explicit settings in the new configuration to override the inherited ones.

    Note: This JSONC format supports inline comments, which are useful during development but should be
    removed or ignored by parsers in production environments.
*/

{
	// Required configuration files for other core modules
	"includes": {
		// Solution variables - mandatory
		"variables": "variables.jsonc",
		// Workspace environment creation steps optional include
		"environment": "environment.jsonc",
		// Defines schema version be used
		"schema": "1.0"
	},
	// Project command aliases
	"aliases": {
		"..": "cd ..",
		"~": "cd $HOME",
		"gow": "cd $PROJ_WORKSPACE",
		"gob": "cd $BUILD_OUT",
		"gofw": "cd $PROJ_SOURCES_BASE",
		"bd": "build sample.btop.debug",
		"br": "build sample.btop.release",
		"log": "sln -l -c",
		"ls": "lsd -g",
		"ll": "lss -la",
		"l": "ls",
		"exit": "quit",
		"x": "quit",
		"q": "quit",
		"cln": "clear",
		"gs": "git status",
		"ga": "git add .",
		"gc": "git commit -m",
		"gp": "git push"
	},
	// Solutions
	"solutions": [
		{
			"name": "sample",
			"description": "Sample solution",
			"build_path": "$BUILD_OUT",
			"workspace": "$PROJ_WORKSPACE",
			// Toolchains used by this solution
			"tool_chains": [
				{
					"name": "x86 x64 Linux GCC Toolchain",
					"platform": "linux",
					"architecture": "x86_64",
					"build_system": "make",
					"make_version": ">=3.16",
					"gcc_version": ">=10.0",
					"required_tools": {
						"make": {
							"path": "make",
							"version": ">=3.16",
							"help": "builder/make.md"
						},
						"gcc": {
							"path": "gcc",
							"version": ">=10.0",
							"help": "builder/gcc-x64.md"
						}
					}
				},
				{
					"name": "AArch64 Cross Toolchain",
					"platform": "linux",
					"architecture": "aarch64",
					"build_system": "make",
					"make_version": ">=3.16",
					"gcc_version": ">=14.0",
					// Adjusted to match the actual Arm toolchain version
					"required_tools": {
						"make": {
							"path": "make",
							"version": ">=3.16",
							"help": "builder/make.md"
						},
						"gcc": {
							// NOTE: this is the actual compiler name from Arm toolchain
							"path": "aarch64-none-linux-gnu-gcc",
							"version": ">=14.0",
							"help": "builder/arm_cross_gcc.md"
						}
					}
				}
			],
			// Projects
			"projects": [
				{
					"name": "btop",
					"description": "Terminal based resource monitor for ARM",
					"tool_chain": "<$ref_solutions[sample].tool_chains[AArch64 Cross Toolchain]>",
					// Per project configuration
					"configurations": [
						{
							"name": "debug",
							"menu_shortcut": "bd",
							"build_path": "<$ref_solutions[sample].build_path>/<$ref_projects[].name>/<$ref_projects[].tool_chain.architecture>/<$ref_name>",
							"execute_from": "$PROJ_SOURCES_BASE/<$ref_projects[].name>",
							"compiler_options": [
								"BUILDDIR=<$ref_build_path>",
								"OPTFLAGS=-O0",
								"WARNFLAGS=-Wall -Wextra -Wno-psabi -Wfatal-errors",
								"EXTRA_CXXFLAGS=-I<$ref_build_path>",
								"CC=aarch64-none-linux-gnu-gcc",
								"CXX=aarch64-none-linux-gnu-g++",
								"LD=aarch64-none-linux-gnu-ld",
								"LDFLAGS=-ldl -pthread"
							],
							"artifacts": [
								"<$ref_build_path>/btop"
							],
							"pre_build_steps": {
								"clean": "!make -C <$ref_execute_from> clean TARGET=<$ref_name> BUILDDIR=<$ref_build_path>"
							},
							"post_build_steps": {
								"move artifacts": "!cp <$ref_execute_from>/bin/btop <$ref_artifacts[0]>"
							}
						},
						{
							"name": "release",
							"data": "<$derived_from_solutions[sample].projects[btop].configurations[debug]>",
							"menu_shortcut": "br",
							"compiler_options": [
								"BUILDDIR=<$ref_build_path>",
								"OPTFLAGS=-O3",
								"WARNFLAGS=-Wall -Wextra -Wno-psabi -Wfatal-errors",
								"EXTRA_CXXFLAGS=-I<$ref_build_path> -DNDEBUG",
								"CC=aarch64-none-linux-gnu-gcc",
								"CXX=aarch64-none-linux-gnu-g++",
								"LD=aarch64-none-linux-gnu-ld",
								"LDFLAGS=-ldl -pthread"
							]
						}
					]
				}
			]
		}
	]
}