/*
    AutoForge solution configuration file
    -------------------------------------
    Use sln -t to view a full tutorial regarding the solution file structure.

    Note: This file uses JSONC â€” an extended JSON format that supports inline comments and multi-line strings.
    This allows for improved readability and documentation which are not valid standard JSON.

*/

{
    // Solutions
    "solutions": [
        {
            "format_off": "# @formatter:off",       // Instruct PyCharm not to format this file.
            "name": "userspace",                    // This solution name
            "description": "Userspace CMake port",  // Mandatory description

            // Specify a sequence of setup operation required for initiating a new workspace
            "workspace_sequence": "<$include>workspace_sequence.jsonc",

            // Include additional project specific commands
            "aliases": "<$include>aliases.jsonc",

            // Include solution specific variables
            "variables": "<$include>variables.jsonc",

            "workspace": "$PROJ_WORKSPACE",         // Base path from which all other path variables are derived.
            "build_path": "$BUILD_OUT",             // Directory for compilation intermediates and output artifacts.
            "default_editor": "*code*",             // Editor selector: 1-based index or name pattern with wildcards (e.g., "*sublime*").
            "schema": "1.0",                        // Version used to validate this and other related JSON files.
            "banner": "Userspace",                  // Optional: ASCII banner shown in prompt mode. Remove to disable.
            "ai_auto_advise": true,                 // Optional: Enables AI-based build advice. Remove or set to false to disable.


            "xray_excluded_path": [
                "*kernel/[0-9]*",                   // Versioned kernel trees like kernel/6.6.4
                "*linux-[0-9]*",                    // Directories like linux-5.10, linux-6.1.1
                "*include/uapi/*",                  // UAPI headers (often duplicated)
                "*kernel-old*",                     // Backup or archived kernel folders
                "*backups/*",                       // Generic backup directories
                "*tmp/*",                           // Temporary code storage
                "*linux-kernel/*",                  // Any full kernel repository copy
                "*external/linux*",                 // External embedded kernel sources
                "*vendor/kernel*",                  // Vendor kernel branches
                "*mirror/linux*",                   // Mirrors or forks of the Linux kernel
                "*export/linux*",                   // Exported versions of kernel sources
                "*source/kernels/*"                 // Centralized kernel storage paths
            ],

            // List of one or more toolchains used by the 'userspace' solution projects.
            "tool_chains": [
                {
                    "name": "Arm GNU AArch64 Cross (CMake + Ninja)",

                    // Assumes the Arm GNU AArch64 toolchain is available under the AutoForge persistent path,
                    // typically located at '$HOME/.auto_forge'.
                    // Note: The sysroot is provided by Arm and included with the toolchain.

                    "platform": "linux",
                    "description": "https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads",
                    "architecture": "aarch64",
                    "build_system": "cmake",                        // AutoForge must have a 'builder' register for this build system.
                    "tool_prefix": "aarch64-none-linux-gnu-",       // Optional binaries name prefix name
                    "tool_base_path": "$AF_TOOL_CHAINS/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu",
                    "tool_bins_path": "<$ref_tool_base_path>/bin",
                    "tool_sysroot": "<$ref_tool_base_path>/aarch64-none-linux-gnu/libc",

                    // List of executables used by this toolchain. These will be validated during the build system initialization phase.
                    "required_tools": {
                        "cmake": {
                            "path": "cmake",
                            "version": ">=3.20",
                            "help": "builder/cmake.md",
                            "options": [
                                "-G",
                                "Ninja",
                                "-DCMAKE_SYSTEM_NAME=Linux",
                                "-DCMAKE_SYSTEM_PROCESSOR=aarch64",
                                "-DCMAKE_C_COMPILER=<$ref_tool_bins_path>/<$ref_tool_prefix>gcc",
                                "-DCMAKE_CXX_COMPILER=<$ref_tool_bins_path>/<$ref_tool_prefix>g++",
                                "-DCMAKE_SYSROOT=<$ref_tool_sysroot>",
                                "-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER",
                                "-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"
                            ]
                        },
                        "gcc": {
                            "path": "<$ref_tool_bins_path>/<$ref_tool_prefix>gcc",
                            "version": ">=14.2",
                            "help": "builder/arm_cross_gcc.md"
                        },
                        "nm": {
                            "path": "<$ref_tool_bins_path>/<$ref_tool_prefix>nm",
                            "version": ">=2.43.1",
                            "help": "builder/arm_cross_gcc.md"
                        },
                        "ninja": {
                            "path": "ninja",
                            "version": ">=1.10",
                            "help": "builder/ninja.md"
                        }
                    }
                },
                {
                    "name": "Arm GNU AArch64 Cross (CMake + make)",
                    "platform": "linux",
                    "description": "https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads",
                    "architecture": "aarch64",
                    "build_system": "cmake",        // AutoForge must have a 'builder' register for this build system.
                    "tool_prefix": "aarch64-none-linux-gnu-",
                    "tool_base_path": "$AF_TOOL_CHAINS/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu",
                    "tool_bins_path": "<$ref_tool_base_path>/bin",
                    "tool_sysroot": "<$ref_tool_base_path>/aarch64-none-linux-gnu/libc",

                    "required_tools": {
                        "cmake": {
                            "path": "cmake",
                            "version": ">=3.20",
                            "help": "builder/cmake.md",
                            "options": [
                                "-G",
                                "-DCMAKE_SYSTEM_NAME=Linux",
                                "-DCMAKE_SYSTEM_PROCESSOR=aarch64",
                                "-DCMAKE_C_COMPILER=<$ref_tool_bins_path>/<$ref_tool_prefix>gcc",
                                "-DCMAKE_CXX_COMPILER=<$ref_tool_bins_path>/<$ref_tool_prefix>g++",
                                "-DCMAKE_SYSROOT=<$ref_tool_sysroot>",
                                "-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER",
                                "-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"
                            ]
                        },
                        "gcc": {
                            "path": "<$ref_tool_bins_path>/<$ref_tool_prefix>gcc",
                            "version": ">=14.2",
                            "help": "builder/arm_cross_gcc.md"
                        },
                        "nm": {
                            "path": "<$ref_tool_bins_path>/<$ref_tool_prefix>nm",
                            "version": ">=2.43.1",
                            "help": "builder/arm_cross_gcc.md"
                        },
                        "make": {
                            "path": "make",
                            "version": ">=4.2",
                            "help": "builder/make.md"
                        }
                    }
                }
            ],

            // List of projects belonging to the 'userspace' solution
            "projects": [
                {
                    "name": "mmg_imc",
                    "description": "ARM64 compilation of the userspace project.",

                    // Point to any of the toolchain(s) listed by for the solution.
                    "tool_chain": "<$ref_solutions[].tool_chains[Arm GNU AArch64 Cross (CMake + Ninja)]>",

                    // List of configurations (discrete build elements) belonging to the 'mmg_imc' project
                    "configurations": [
                        {
                            "name": "debug",

                            // Directory for intermediate build artifacts such as object files, logs, and temporary outputs
                            "build_path": "<$ref_solutions[].build_path>/<$ref_projects[].name>/<$ref_projects[].tool_chain.architecture>/<$ref_name>",

                            // Defines an alias name for triggering this build.
                            // This alias will be used in the interactive shell interface and embedded in the exported AI context.
                            "menu_command": {
                                "name": "busd",
                                "description": "ðŸ”¨ Build `userspace` <$ref_projects[].name>/<$ref_name> for <$ref_projects[].tool_chain.architecture>"
                            },

                            // This is where the top-level CMakeLists.txt is located; compilation starts from this path.
                            "execute_from": "$SOURCE_BASE/userspace",

                            // Optional: customize the behavior of the 'clean' operation for this configuration
                            "clean": "cmake --build <$ref_build_path> --target clean",

                            // Specify compilation flags relevant to this configuration. These will be merged with the
                            // toolchain's general flags and passed to CMake when it is invoked.

                            "compiler_options": [
                                "-S .",
                                "-B <$ref_build_path>",
                                "-DCMAKE_BUILD_TYPE=Debug",
                                "-DSOURCES_ROOT_PATH=$USERSPACE_MMG",
                                "-DEBUG=1",
                                "-DRELEASE=0",
                                "-DCLEAN_BETWEEN=0",
                                "-DMEV_TS=0",
                                "-DMEV_1=0",
                                "-DMMG=1",
                                "-DREBUILD=1",
                                "-DSKIP_FT_GEN=1",
                                "-DCOVERAGE_ENABLE=0",
                                "-DANVM=0",
                                "-DMEV1_DPCP=0",
                                "-DDO_COMPILE_INFRA=1",

                                // GCC debug flags
                                "-DCMAKE_C_FLAGS_DEBUG=-O0 -g3 -ggdb",
                                "-DCMAKE_CXX_FLAGS_DEBUG=-O0 -g3 -ggdb"
                            ],

                            // Optional environment variables to inject into the build process.
                            // These override AutoForge defaults but can still be overridden
                            // at runtime by user-supplied environment settings.

                            "environment": {
                                 "MY_CUSTOM_FLAG_A": "A",
                                 "MY_CUSTOM_FLAG_B": "B"
                             },

                            // A list of items built by this configuration, along with an optional action.
                            // For supported actions, refer to the implementation of the 'builder' class
                            // in AutoForge (e.g., 'cmake').

                            "artifacts": [
                                {
                                    "name": "static_libs",
                                    "path": "<$ref_build_path>/**/*.a",
                                    "copy_to": "$BUILD_IMAGES/static_libs"

                                },
                                {
                                    "name": "shared_libs",
                                    "path": "<$ref_build_path>/**/*.so",
                                    "copy_to": "$BUILD_IMAGES/shared_libs"
                                }
                            ],

                            // List of actions to perform before compilation starts.

                            "pre_build_steps": [
                                {
                                    "name": "Clean Static Libraries",
                                    "command": "!rm -rf $BUILD_IMAGES/static_libs"
                                },
                                {
                                    "name": "Clean Shared Libraries",
                                    "command": "!rm -rf $BUILD_IMAGES/shared_libs"
                                }
                            ],

                            // List of actions to perform after the build has completed successfully.

                            "post_build_steps": [
                            ]
                        },
                        {
                            // Additional configuration demonstrating the use of the 'derived_from' keyword,
                            // which allows inheriting all properties from an existing configuration and specifying
                            // only the elements to override.


                            "name": "release",
                            "data": "<$derived_from_solutions[].projects[].configurations[debug]>",
                            "menu_command": {
                                "name": "busr",
                                "description": "ðŸ”¨ Build `userspace` <$ref_projects[].name>/<$ref_name> for <$ref_projects[].tool_chain.architecture>"
                            },
                            "compiler_options": [
                                "-S .",
                                "-B <$ref_build_path>",
                                "-DCMAKE_BUILD_TYPE=Release",
                                "-DSOURCES_ROOT_PATH=$USERSPACE_MMG",
                                "-DEBUG=0",
                                "-DRELEASE=1",
                                "-DCLEAN_BETWEEN=0",
                                "-DMEV_TS=0",
                                "-DMEV_1=0",
                                "-DMMG=1",
                                "-DREBUILD=1",
                                "-DSKIP_FT_GEN=1",
                                "-DCOVERAGE_ENABLE=0",
                                "-DANVM=0",
                                "-DMEV1_DPCP=0",
                                "-DDO_COMPILE_INFRA=0",

                                // GCC optimization flag â€” can be fine-tuned further in the CMake files
                                "-DCMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG",
                                "-DCMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG"
                            ],

                            // This is how we can avoid inheriting unwanted element
                            "environment": null
                        }
                    ]
                }
            ]
        }
    ]
}