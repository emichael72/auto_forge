/*
    Workspace setup sequence recipe for 'userspace'
    -----------------------------------------------

    Note: This file uses JSONC â€” an extended JSON format that supports inline comments and multi-line strings.
    This allows for improved readability and documentation which are not valid standard JSON.

*/

{
    "status_title_length": 60,
    "status_add_time_prefix": true,
    "status_new_line": true,
    // Enables multi-line status output instead of in-place updates
    "status_pre_message": "\nHello, welcome to the '$SOLUTION_NAME' solution setup.",
    "status_post_message": "\n\nSetup done.\nReopen terminal to apply changes, next type 'us' to start.",
    "steps": [
        {
            "description": "Looking for 'dt'",
            "method": "validate_prerequisite",
            "status_on_error": "\nPackage 'dt' could not be found. Please make sure it is installed and try again.",
            "action_on_error": "resume",
            // Recommended: use 'break' or omit this field in production
            "arguments": {
                "command": "dt",
                "cli_args": "version",
                "cwd": "$HOME/bin"
            }
        },
        {
            "description": "Looking for 'python' 3.9.0 or greater",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install python3'",
                "ubuntu": "Run 'sudo apt install python3'",
                "arch": "Run 'sudo pacman -S python'",
                "default": "Python 3.9 or newer is required."
            },
            "arguments": {
                "default": {
                    "command": "python3",
                    "cli_args": "--version",
                    "version": ">=3.9.0"
                }
            }
        },
        {
            "description": "Looking for 'git'",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install git'",
                "ubuntu": "Run 'sudo apt install git'",
                "arch": "Run 'sudo pacman -S git'",
                "default": "Package 'git' not found."
            },
            "arguments": {
                "default": {
                    "command": "git",
                    "cli_args": "--version",
                    "version": ">=2.0"
                }
            }
        },
        {
            "description": "Looking for 'cmake'",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install cmake'",
                "ubuntu": "Run 'sudo apt install cmake'",
                "arch": "Run 'sudo pacman -S cmake'",
                "default": "Package 'cmake' not found."
            },
            "arguments": {
                "default": {
                    "command": "cmake",
                    "cli_args": "--version",
                    "version": ">=3.0.0"
                }
            }
        },
        {
            "description": "Looking for 'ninja'",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install ninja-build'",
                "ubuntu": "Run 'sudo apt install ninja-build'",
                "arch": "Run 'sudo pacman -S ninja'",
                "default": "Package 'ninja' not found."
            },
            "arguments": {
                "default": {
                    "command": "ninja",
                    "cli_args": "--version",
                    "version": ">=1.0.0"
                }
            }
        },
        {
            "description": "Looking for 'glib2' (development)",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install glib2-devel'",
                "ubuntu": "Run 'sudo apt install libglib2.0-dev'",
                "arch": "Run 'sudo pacman -S glib2'",
                "default": "Missing 'glib2-devel' or equivalent"
            },
            "arguments": {
                "default": {
                    "command": "pkg-config",
                    "cli_args": "--modversion glib-2.0",
                    "version": ">=2.0.0"
                },
                "ubuntu": {
                    "command": "pkg-config",
                    "cli_args": "--modversion glib-2.0",
                    "version": ">=2.0.0"
                },
                "arch": {
                    "command": "pkgconf",
                    "cli_args": "--modversion glib-2.0",
                    "version": ">=2.0.0"
                }
            }
        },
        {
            "description": "Looking for 'libconfig' (development)",
            "method": "validate_prerequisite",
            "status_on_error": {
                "fedora": "Run 'sudo dnf install libconfig-devel'",
                "ubuntu": "Run 'sudo apt install libconfig-dev'",
                "arch": "Run 'sudo pacman -S libconfig'",
                "default": "Missing 'libconfig-devel' or equivalent"
            },
            "arguments": {
                "default": {
                    "command": "pkg-config",
                    "cli_args": "--modversion libconfig",
                    "version": ">=1.4.0"
                },
                "ubuntu": {
                    "command": "pkg-config",
                    "cli_args": "--modversion libconfig",
                    "version": ">=1.4.0"
                },
                "arch": {
                    "command": "pkgconf",
                    "cli_args": "--modversion libconfig",
                    "version": ">=1.4.0"
                }
            }
        },
        {
            "description": "Getting GitHub access token using 'dt'",
            "method": "execute_shell_command",
            "status_on_error": "\nFailed to retrieve Git token using 'dt'.\nPlease ensure it is installed correctly.",
            "action_on_error": "resume",
            // Recommended: use 'break' or omit this field in production
            "arguments": {
                "command_and_args": "dt github print-token",
                "cwd": "$HOME/bin"
            },
            // Store the executed command response in key name 'dt_token'
            "response_store_key": "dt_token"
        },
        {
            "description": "Initializing workspace path",
            "method": "initialize_workspace",
            "arguments": {
                "delete_existing": false,
                "must_be_empty": true,
                "create_as_needed": true,
                "change_dir": true
            }
        },
        {
            "description": "Creating Python virtual environment",
            "method": "python_virtualenv_create",
            "arguments": {
                "venv_path": ".venv"
            }
        },
        {
            "description": "Updating PIP in virtual environment",
            "method": "python_update_pip",
            "arguments": {
                "venv_path": ".venv"
            }
        },
        {
            "description": "Installing Python packages",
            "method": "python_package_add",
            "arguments": {
                "venv_path": ".venv",
                "package_or_requirements": "colorama json5 jsonschema tabulate psutil toml gitpython wheel"
            }
        },
        {
            "description": "Check if we have ARM AArch64 toolchain",
            "method": "conditional",
            "arguments": {
                "condition": {
                    "method": "validate_prerequisite",
                    "arguments": {
                        "command": "$AF_TOOL_CHAINS/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc",
                        "cli_args": "--version",
                        "version": ">=14.2"
                    }
                },
                "if_false": [
                    {
                        "description": "Getting ARM AArch64 cross-toolchain 14.2",
                        "method": "url_get",
                        "arguments": {
                            "url": "https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz",
                            "destination": "$AF_TOOL_CHAINS/downloads",
                            "timeout": 240.0,
                            "delete_if_exist": true
                        }
                    },
                    {
                        "description": "Decompressing ARM AArch64 tool-chain",
                        "method": "decompress",
                        "arguments": {
                            "archive_path": "$AF_TOOL_CHAINS/downloads/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz",
                            "destination_path": "$AF_TOOL_CHAINS/"
                        }
                    }
                ]
            }
        },
        {
            "description": "Installing AutoForge in virtual environment",
            "method": "python_package_add",
            "action_on_error": "resume",
            "arguments": {
                "venv_path": ".venv",
                "package_or_requirements": "git+$PACKAGE_REPO"
            }
        },
        {
            "description": "Adding shell alias 'usd' to the solution",
            "method": "create_alias",
            "action_on_error": "resume",
            "arguments": {
                "alias": "usd",
                "command": "$PROJ_WORKSPACE/env.sh --debug_host localhost --debug_port 5678 --verbose"
            }
        },
        {
            "description": "Adding shell alias 'usr' to the solution",
            "method": "create_alias",
            "action_on_error": "resume",
            "arguments": {
                "alias": "usr",
                "command": "$PROJ_WORKSPACE/env.sh --run_command"
            }
        },
        {
            "description": "Adding shell alias 'us' to the solution",
            "method": "create_alias",
            "action_on_error": "resume",
            "arguments": {
                "alias": "us",
                "command": "$PROJ_WORKSPACE/env.sh",
                "commit_changes": true
            }
        }
    ]
}
